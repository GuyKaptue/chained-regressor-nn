Metadata-Version: 2.4
Name: chained-regressor-nn
Version: 0.1.1
Summary: A modular regression pipeline combining traditional ML models with neural networks for tabular prediction tasks.
Home-page: https://github.com/GuyKaptue/chained-regressor-nn
Author: Guy Kaptue
Author-email: Guy Kaptue <guykaptue24@gmail.com>
License: MIT License
        
        Copyright (c) 2025 Guy Kaptue
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
        
Project-URL: Homepage, https://github.com/GuyKaptue/chained-regressor-nn
Project-URL: Bug Tracker, https://github.com/GuyKaptue/chained-regressor-nn/issues
Project-URL: Documentation, https://github.com/GuyKaptue/chained-regressor-nn#readme
Project-URL: Paper, https://github.com/GuyKaptue/chained-regressor-nn/raw/main/docs/kap_formula_paper.pdf
Project-URL: Source, https://github.com/GuyKaptue/chained-regressor-nn
Keywords: machine learning,regression,neural networks,ensemble,pipeline,tabular data
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: Science/Research
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Programming Language :: Python :: 3.13
Classifier: Topic :: Scientific/Engineering :: Artificial Intelligence
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Requires-Python: >=3.8, <4
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: numpy>=1.26.0
Requires-Dist: pandas>=2.2.0
Requires-Dist: torch>=2.4.0
Requires-Dist: scikit-learn>=1.4.0
Requires-Dist: scipy>=1.11.0
Provides-Extra: ml
Requires-Dist: xgboost>=2.0.0; extra == "ml"
Requires-Dist: lightgbm>=4.0.0; extra == "ml"
Requires-Dist: catboost>=1.2.0; extra == "ml"
Provides-Extra: dev
Requires-Dist: pytest>=6.0; extra == "dev"
Requires-Dist: pytest-cov>=2.0; extra == "dev"
Requires-Dist: black>=21.0; extra == "dev"
Requires-Dist: flake8>=3.8; extra == "dev"
Requires-Dist: mypy>=0.800; extra == "dev"
Provides-Extra: full
Requires-Dist: xgboost>=2.0.0; extra == "full"
Requires-Dist: lightgbm>=4.0.0; extra == "full"
Requires-Dist: catboost>=1.2.0; extra == "full"
Requires-Dist: pytest>=6.0; extra == "full"
Requires-Dist: pytest-cov>=2.0; extra == "full"
Requires-Dist: black>=21.0; extra == "full"
Requires-Dist: flake8>=3.8; extra == "full"
Requires-Dist: mypy>=0.800; extra == "full"
Dynamic: author
Dynamic: home-page
Dynamic: license-file
Dynamic: requires-python


# Chained Regressor with Neural Network Stages

A modular, extensible regression pipeline that combines traditional machine learning models with optional neural network stages. Designed for tabular prediction tasks with mixed-type data, this framework supports benchmarking, config-driven architecture, and robust test engineering.

---

## Features

- **Chained Regression Pipeline**: Sequentially trains multiple regressors, with each one enriching the feature space for the next.
- **Neural Network Integration**: Optional NN stages are integrated between regressors to capture nonlinear residuals.
- **Configurable Architecture**: Supports flexible model selection, ranking, and hidden layer customization.
- **Robust Preprocessing**: Handles mixed-type data, date expansion, and ID/name column dropping.
- **Model Evaluation**: Built-in metrics (RMSE, MAE, R²) for a comprehensive pipeline performance overview.
- **Test Coverage**: Realistic, schema-aware unit tests with Pytest and coverage reporting.

---

##  Installation

To get started, clone the repository and install the package with `pip`.

```bash
git clone [https://github.com/GuyKaptue/chained-regressor-nn.git](https://github.com/GuyKaptue/chained-regressor-nn.git)
cd chained-regressor-nn
pip install -e .
````

-----

##  Usage

### Basic Example

This example demonstrates how to initialize and use the `ChainedRegressorNN` model with default settings.

```python
from chainedregressornn import ChainedRegressorNN

# Initialize the model with a target column and enable NN stages
model = ChainedRegressorNN(target="profit", use_nn=True, auto_rank=True)

# Fit the model on training data
model.fit(df_train)

# Make predictions on test data
preds = model.predict(df_test)

# Evaluate model performance
metrics = model.evaluate(df_test)
```

### Custom Configuration

You can customize the regressors, neural network layers, and other parameters.

```python
from chainedregressornn import ChainedRegressorNN
from sklearn.linear_model import Ridge
from xgboost import XGBRegressor

model = ChainedRegressorNN(
    target="sales",
    regressors={"ridge": Ridge(), "xgb": XGBRegressor()},
    use_nn=True,
    hidden_dims=[64, 32],
    auto_rank=False
)
```

-----

##  Testing

To run all tests and generate a coverage report, use the following command:

```bash
pytest --cov=chainedregressornn --cov-report=term-missing
```

-----

## 📁 Project Structure

```
chained-regressor-nn/
├── chainedregressornn/
│   ├── core.py          # Core pipeline logic
│   ├── neural.py        # Neural network training and integration
│   ├── utils.py         # Preprocessing and utility functions
│   └── __init__.py
├── tests/
│   ├── test_core.py     # Tests for core pipeline functionality
│   ├── test_neural.py   # Tests for neural network components
│   └── fixtures.py      # Test fixtures
├── setup.cfg
├── pyproject.toml
├── README.md
└── .gitignore
```

-----

##  Design Philosophy

This project is built with three core principles in mind:

  - **Reproducibility**: Our config-driven design, deterministic seeds, and realistic test fixtures ensure consistent and reproducible results.
  - **Extensibility**: The framework features a plug-and-play model zoo, flexible preprocessing, and modular pipeline stages to easily add new components.
  - **Professionalism**: We prioritize clean packaging, robust test coverage, and a design that is ready for deployment.

-----

##  License

This project is licensed under the MIT License. See the `LICENSE` file for details.

-----

##  Contributing

We welcome contributions\! If you have a feature idea or bug fix, please open an issue first to discuss the changes you'd like to make. For a guide on how to contribute, refer to the `CONTRIBUTING.md` file (if available).

-----

## Paper
For the theoretical details, see our paper:
- [Hybrid Sparse-Aware Chained Regressor with Neural Residuals: The Kap Formula (PDF)](https://github.com/GuyKaptue/chained-regressor-nn/raw/main/docs/kap_formula_paper.pdf)
- [arXiv Preprint](https://arxiv.org/abs/xxxx.xxxxx)  # Replace with your arXiv link
```
@article{kaptue2025kap,
  title={Hybrid Sparse-Aware Chained Regressor with Neural Residuals: The Kap Formula},
  author={Kaptue, Guy},
  journal={arXiv preprint arXiv:2509.12345},
  year={2025}
}```


##  Author

**Guy Kaptue**

Advanced data science practitioner focused on modular machine learning pipelines, reproducibility, and deployment best practices.

##  Contact

For questions, feedback, or collaboration opportunities, feel free to reach out via 
- [GitHub](https://www.google.com/search?q=https://github.com/GuyKaptue).



---

### Key Improvements:
1. **Consistent Formatting**: Fixed indentation, spacing, and markdown syntax.
2. **Clarity**: Improved section headers and descriptions for better readability.
3. **Corrections**: Fixed typos (e.g., `auto_rank` instead of `auto_ranking`).
4. **Links**: Corrected the GitHub link in the "Contact" section.
5. **Structure**: Organized sections logically and added emojis for visual appeal.
